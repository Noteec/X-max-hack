# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test0.0.1.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Test(object):
    def setupUi(self, Test):
        Test.setObjectName("Test")
        Test.resize(936, 723)
        Test.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(Test)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.layoutWidget = QtWidgets.QWidget(self.frame)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 10, 254, 221))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Companies = QtWidgets.QFrame(self.layoutWidget)
        self.Companies.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Companies.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Companies.setObjectName("Companies")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.Companies)
        self.verticalLayout.setObjectName("verticalLayout")
        self.box_accii = QtWidgets.QComboBox(self.Companies)
        self.box_accii.setObjectName("box_accii")
        self.box_accii.addItem("")
        self.box_accii.addItem("")
        self.verticalLayout.addWidget(self.box_accii)
        self.box_obl = QtWidgets.QComboBox(self.Companies)
        self.box_obl.setObjectName("box_obl")
        self.box_obl.addItem("")
        self.box_obl.addItem("")
        self.verticalLayout.addWidget(self.box_obl)
        self.box_bezrisk = QtWidgets.QComboBox(self.Companies)
        self.box_bezrisk.setAcceptDrops(False)
        self.box_bezrisk.setObjectName("box_bezrisk")
        self.box_bezrisk.addItem("")
        self.verticalLayout.addWidget(self.box_bezrisk)
        self.box_money = QtWidgets.QComboBox(self.Companies)
        self.box_money.setObjectName("box_money")
        self.box_money.addItem("")
        self.box_money.addItem("")
        self.box_money.addItem("")
        self.verticalLayout.addWidget(self.box_money)
        self.horizontalLayout.addWidget(self.Companies)
        self.Info = QtWidgets.QFrame(self.layoutWidget)
        self.Info.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Info.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Info.setObjectName("Info")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.Info)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.tabWidget = QtWidgets.QTabWidget(self.Info)
        self.tabWidget.setStyleSheet("QTabWidget::pane { /* The tab widget frame */\n"
"    border-top: 2px solid #C2C7CB;\n"
"}\n"
"\n"
"QTabWidget::tab-bar {\n"
"    left: 5px; /* move to the right by 5px */\n"
"}\n"
"\n"
"/* Style the tab using the tab sub-control. Note that\n"
"    it reads QTabBar _not_ QTabWidget */\n"
"QTabBar::tab {\n"
"    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                stop: 0 #E1E1E1, stop: 0.4 #DDDDDD,\n"
"                                stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);\n"
"    border: 2px solid #C4C4C3;\n"
"    border-bottom-color: #C2C7CB; /* same as the pane color */\n"
"    border-top-left-radius: 4px;\n"
"    border-top-right-radius: 4px;\n"
"    min-width: 8ex;\n"
"    padding: 2px;\n"
"}\n"
"\n"
"QTabBar::tab:selected, QTabBar::tab:hover {\n"
"    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                stop: 0 #fafafa, stop: 0.4 #f4f4f4,\n"
"                                stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);\n"
"}\n"
"\n"
"QTabBar::tab:selected {\n"
"    border-color: #9B9B9B;\n"
"    border-bottom-color: #C2C7CB; /* same as pane color */\n"
"}\n"
"\n"
"QTabBar::tab:!selected {\n"
"    margin-top: 2px; /* make non-selected tabs look smaller */\n"
"}\n"
"\n"
"/* make use of negative margins for overlapping tabs */\n"
"QTabBar::tab:selected {\n"
"    /* expand/overlap to the left and right by 4px */\n"
"    margin-left: -4px;\n"
"    margin-right: -4px;\n"
"}\n"
"\n"
"QTabBar::tab:first:selected {\n"
"    margin-left: 0; /* the first selected tab has nothing to overlap with on the left */\n"
"}\n"
"\n"
"QTabBar::tab:last:selected {\n"
"    margin-right: 0; /* the last selected tab has nothing to overlap with on the right */\n"
"}\n"
"\n"
"QTabBar::tab:only-one {\n"
"    margin: 0; /* if there is only one tab, we don\'t want overlapping margins */\n"
"}")
        self.tabWidget.setObjectName("tabWidget")
        self.Percentage = QtWidgets.QWidget()
        self.Percentage.setObjectName("Percentage")
        self.formLayout_3 = QtWidgets.QFormLayout(self.Percentage)
        self.formLayout_3.setObjectName("formLayout_3")
        self.PerOpt = QtWidgets.QComboBox(self.Percentage)
        self.PerOpt.setObjectName("PerOpt")
        self.PerOpt.addItem("")
        self.PerOpt.addItem("")
        self.PerOpt.addItem("")
        self.PerOpt.addItem("")
        self.PerOpt.addItem("")
        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.PerOpt)
        self.tabWidget.addTab(self.Percentage, "")
        self.quantile = QtWidgets.QWidget()
        self.quantile.setObjectName("quantile")
        self.formLayout_2 = QtWidgets.QFormLayout(self.quantile)
        self.formLayout_2.setObjectName("formLayout_2")
        self.QuantOpt = QtWidgets.QComboBox(self.quantile)
        self.QuantOpt.setObjectName("QuantOpt")
        self.QuantOpt.addItem("")
        self.QuantOpt.addItem("")
        self.QuantOpt.addItem("")
        self.QuantOpt.addItem("")
        self.QuantOpt.addItem("")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.QuantOpt)
        self.tabWidget.addTab(self.quantile, "")
        self.verticalLayout_3.addWidget(self.tabWidget)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Period = QtWidgets.QLabel(self.Info)
        self.Period.setObjectName("Period")
        self.verticalLayout_2.addWidget(self.Period)
        self.days = QtWidgets.QComboBox(self.Info)
        self.days.setObjectName("days")
        self.days.addItem("")
        self.days.addItem("")
        self.days.addItem("")
        self.days.addItem("")
        self.days.addItem("")
        self.verticalLayout_2.addWidget(self.days)
        self.Start = QtWidgets.QPushButton(self.Info)
        self.Start.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Start.setObjectName("Start")
        self.verticalLayout_2.addWidget(self.Start)
        self.Benefit = QtWidgets.QLineEdit(self.Info)
        self.Benefit.setObjectName("Benefit")
        self.verticalLayout_2.addWidget(self.Benefit)
        self.Risk = QtWidgets.QLineEdit(self.Info)
        self.Risk.setReadOnly(False)
        self.Risk.setObjectName("Risk")
        self.verticalLayout_2.addWidget(self.Risk)
        self.verticalLayout_4.addLayout(self.verticalLayout_2)
        self.horizontalLayout_3.addLayout(self.verticalLayout_4)
        self.horizontalLayout.addWidget(self.Info)
        self.gridLayout_4.addWidget(self.frame, 0, 0, 1, 1)
        Test.setCentralWidget(self.centralwidget)

        self.retranslateUi(Test)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(Test)

    def retranslateUi(self, Test):
        _translate = QtCore.QCoreApplication.translate
        Test.setWindowTitle(_translate("Test", "MainWindow"))
        self.box_accii.setItemText(0, _translate("Test", "1"))
        self.box_accii.setItemText(1, _translate("Test", "2"))
        self.box_obl.setItemText(0, _translate("Test", "1"))
        self.box_obl.setItemText(1, _translate("Test", "2"))
        self.box_bezrisk.setItemText(0, _translate("Test", "1"))
        self.box_money.setItemText(0, _translate("Test", "100000"))
        self.box_money.setItemText(1, _translate("Test", "500000"))
        self.box_money.setItemText(2, _translate("Test", "1000000"))
        self.PerOpt.setItemText(0, _translate("Test", "None"))
        self.PerOpt.setItemText(1, _translate("Test", "99%"))
        self.PerOpt.setItemText(2, _translate("Test", "95%"))
        self.PerOpt.setItemText(3, _translate("Test", "90%"))
        self.PerOpt.setItemText(4, _translate("Test", "50%"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Percentage), _translate("Test", "percantage"))
        self.QuantOpt.setItemText(0, _translate("Test", "None"))
        self.QuantOpt.setItemText(1, _translate("Test", "2.326"))
        self.QuantOpt.setItemText(2, _translate("Test", "1.645"))
        self.QuantOpt.setItemText(3, _translate("Test", "1.282"))
        self.QuantOpt.setItemText(4, _translate("Test", "0.001"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.quantile), _translate("Test", "quantile"))
        self.Period.setText(_translate("Test", "Period"))
        self.days.setItemText(0, _translate("Test", "1"))
        self.days.setItemText(1, _translate("Test", "5"))
        self.days.setItemText(2, _translate("Test", "10"))
        self.days.setItemText(3, _translate("Test", "15"))
        self.days.setItemText(4, _translate("Test", "20"))
        self.Start.setText(_translate("Test", "Start"))
        
        self.Start.clicked.connect(self.start)
        self.PerOpt.currentTextChanged.connect(self.prcChange)
        self.QuantOpt.currentTextChanged.connect(self.quaChange)
    
    def start(self):
        accii = self.box_accii.currentText()
        obl = self.box_obl.currentText()
        money = self.box_money.currentText()
        prc = self.PerOpt.currentText()
        qua = float (self.QuantOpt.currentText())
        per = float(self.days.currentText())
        pat = ['D:\Projects\X-max hack\Comp\GAZP_220103_221216.txt']
        rez = []
        for a in pat:
                rez.append(ActLoose(a, qua, per)) 
        self.Risk.setText(str(rez[0]))
        rez = getActValues(pat[0])
        gp = StandartOtklon(rez)
        self.Benefit.setText(str(gp))
        
    def prcChange(self):
        self.QuantOpt.setCurrentIndex(self.PerOpt.currentIndex())
    def quaChange(self):
        self.PerOpt.setCurrentIndex(self.QuantOpt.currentIndex())
        
def getActValues(path):
    with open(path, 'r') as f:
            lines = f.readlines()
            lines.pop(0)
            values = []
    for line in lines:
            values.append(float(line.split(';')[4]))
    return values

def ActLoose(pp, q, t):
        actValues = getActValues(pp)
        pva = actValues[len(actValues) - 1]
        de = DailyChanges(actValues)
        ep = np.average(de)
        gp = StandartOtklon(actValues) ** 0.5
        return pva * (ep * t - q * gp * (t ** 0.5))

def StandartOtklon(actValues):
        aav = np.average(actValues)
        sum = 0
        for a in actValues:
                sum += a - aav
        return sum/(len(actValues) - 1)

def DailyChanges(actValues):
        changes = []
        for i in range(len(actValues)-1):
                changes.append((actValues[i+1] - actValues[i])/actValues[i] * 100)
        return changes


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Test = QtWidgets.QMainWindow()
    ui = Ui_Test()
    ui.setupUi(Test)
    Test.show()
    sys.exit(app.exec_())
